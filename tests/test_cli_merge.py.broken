"""CLI integration tests for merge profiles command."""

import pytest
import subprocess
import sys
from unittest.mock import patch, MagicMock

try:
    import pexpect
    PEXPECT_AVAILABLE = True
except ImportError:
    PEXPECT_AVAILABLE = False

from src.commands.merge import merge_profiles


class TestCLIMerge:
    """Test CLI integration for merge command."""
    
    def test_merge_help_text(self):
        """Test that merge command shows helpful documentation."""
        result = subprocess.run(
            [sys.executable, "main.py", "merge", "--help"],
            capture_output=True,
            text=True
        )
        
        assert result.returncode == 0
        assert "Merge one or more user profiles" in result.stdout
        assert "--main-id" in result.stdout
        assert "--merge-id" in result.stdout
        assert "--dry-run" in result.stdout
        assert "--prefer-main" in result.stdout
        assert "--prefer-merge" in result.stdout
        assert "--prefer-longest" in result.stdout
        assert "--no-interactive" in result.stdout
    
    def test_merge_missing_required_args(self):
        """Test CLI validation for missing required arguments."""
        # Missing main-id
        result = subprocess.run(
            [sys.executable, "main.py", "merge", "--merge-id", "2"],
            capture_output=True,
            text=True
        )
        
        assert result.returncode == 2  # Click's missing option error
        assert "main-id" in result.stderr.lower()
        
        # Missing merge-id
        result = subprocess.run(
            [sys.executable, "main.py", "merge", "--main-id", "1"],
            capture_output=True,
            text=True
        )
        
        assert result.returncode == 2  # Click's missing option error
        assert "merge-id" in result.stderr.lower()
    
    def test_merge_short_flags(self):
        """Test CLI accepts short flags."""
        with patch('src.commands.merge.merge_profiles', return_value=0) as mock_merge:
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2", "-i", "3"],
                capture_output=True,
                text=True
            )
            
            # Should not exit with error due to argument parsing
            assert result.returncode == 0
    
    @pytest.mark.skipif(not PEXPECT_AVAILABLE, reason="pexpect not available")
    def test_merge_interactive_confirmation(self):
        """Test interactive merge confirmation using pexpect."""
        with patch('src.commands.merge.db_manager') as mock_db:
            mock_session = MagicMock()
            mock_db.get_session.return_value = mock_session
            
            # Mock users
            from core.models import User
            main_user = User(id=1, first_name="John", last_name="Doe")
            merge_user = User(id=2, first_name="Jane", last_name="Smith")
            
            mock_session.query.return_value.filter_by.return_value.with_for_update.return_value.first.side_effect = [
                main_user, merge_user
            ]
            mock_session.begin.return_value.__enter__.return_value = mock_session
            
            try:
                child = pexpect.spawn(f'{sys.executable} main.py merge -m 1 -i 2', timeout=30)
                child.expect('Proceed with merge?')
                child.sendline('y')
                child.expect(pexpect.EOF)
                assert child.exitstatus == 0
            except pexpect.exceptions.TIMEOUT:
                pytest.skip("Interactive test timed out")
    
    @pytest.mark.skipif(not PEXPECT_AVAILABLE, reason="pexpect not available")
    def test_merge_interactive_conflict_resolution(self):
        """Test interactive conflict resolution using pexpect."""
        with patch('src.commands.merge.db_manager') as mock_db:
            mock_session = MagicMock()
            mock_db.get_session.return_value = mock_session
            
            # Mock users with conflicts
            from core.models import User
            main_user = User(
                id=1, first_name="John", last_name="Doe",
                email="john@example.com", phone="555-1234"
            )
            merge_user = User(
                id=2, first_name="Jane", last_name="Smith", 
                email="jane@example.com", phone="555-5678"
            )
            
            mock_session.query.return_value.filter_by.return_value.with_for_update.return_value.first.side_effect = [
                main_user, merge_user
            ]
            mock_session.begin.return_value.__enter__.return_value = mock_session
            
            try:
                child = pexpect.spawn(f'{sys.executable} main.py merge -m 1 -i 2', timeout=30)
                
                # Handle email conflict
                child.expect('Conflicting emails found')
                child.expect('Choose which value to keep')
                child.sendline('1')  # Choose main user's email
                
                # Handle phone conflict
                child.expect('Conflicting phones found')
                child.expect('Choose which value to keep')
                child.sendline('2')  # Choose merge user's phone
                
                # Final confirmation
                child.expect('Proceed with merge?')
                child.sendline('y')
                
                child.expect(pexpect.EOF)
                assert child.exitstatus == 0
                
            except pexpect.exceptions.TIMEOUT:
                pytest.skip("Interactive test timed out")
    
    def test_merge_dry_run_flag(self):
        """Test dry-run flag shows preview without executing."""
        with patch('src.commands.merge.merge_profiles', return_value=0) as mock_merge:
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2", "--dry-run"],
                capture_output=True,
                text=True
            )
            
            assert result.returncode == 0
            mock_merge.assert_called_once_with(
                main_id=1,
                merge_ids=[2],
                dry_run=True,
                resolution_mode=None,
                no_interactive=False
            )
    
    def test_merge_prefer_main_flag(self):
        """Test --prefer-main flag is passed correctly."""
        with patch('src.commands.merge.merge_profiles', return_value=0) as mock_merge:
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2", "--prefer-main"],
                capture_output=True,
                text=True
            )
            
            assert result.returncode == 0
            mock_merge.assert_called_once_with(
                main_id=1,
                merge_ids=[2],
                dry_run=False,
                resolution_mode="prefer_main",
                no_interactive=False
            )
    
    def test_merge_prefer_merge_flag(self):
        """Test --prefer-merge flag is passed correctly."""
        with patch('src.commands.merge.merge_profiles', return_value=0) as mock_merge:
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2", "--prefer-merge"],
                capture_output=True,
                text=True
            )
            
            assert result.returncode == 0
            mock_merge.assert_called_once_with(
                main_id=1,
                merge_ids=[2],
                dry_run=False,
                resolution_mode="prefer_merge",
                no_interactive=False
            )
    
    def test_merge_prefer_longest_flag(self):
        """Test --prefer-longest flag is passed correctly."""
        with patch('src.commands.merge.merge_profiles', return_value=0) as mock_merge:
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2", "--prefer-longest"],
                capture_output=True,
                text=True
            )
            
        assert result.returncode == 0
        mock_merge.assert_called_once_with(
            main_id=1,
            merge_ids=[2],
            dry_run=False,
            resolution_mode="prefer_longest",
            no_interactive=False
        )
    
    def test_merge_no_interactive_flag(self):
        """Test --no-interactive flag is passed correctly."""
        with patch('src.commands.merge.merge_profiles', return_value=0) as mock_merge:
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2", "--no-interactive"],
                capture_output=True,
                text=True
            )
            
        assert result.returncode == 0
        mock_merge.assert_called_once_with(
            main_id=1,
            merge_ids=[2], 
            dry_run=False,
            resolution_mode=None,
            no_interactive=True
        )
    
    def test_merge_multiple_ids(self):
        """Test merging multiple users at once."""
        with patch('src.commands.merge.merge_profiles', return_value=0) as mock_merge:
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2", "-i", "3", "-i", "4"],
                capture_output=True,
                text=True
            )
            
        assert result.returncode == 0
        mock_merge.assert_called_once_with(
            main_id=1,
            merge_ids=[2, 3, 4],
            dry_run=False,
            resolution_mode=None,
            no_interactive=False
        )
    
    def test_merge_exit_codes(self):
        """Test that CLI properly exits with merge function's exit code."""
        # Test exit code 4 (validation error)
        with patch('src.commands.merge.merge_profiles', return_value=4):
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2"],
                capture_output=True,
                text=True
            )
            assert result.returncode == 4
        
        # Test exit code 2 (email conflict)
        with patch('src.commands.merge.merge_profiles', return_value=2):
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2"],
                capture_output=True,
                text=True
            )
            assert result.returncode == 2
        
        # Test exit code 1 (database error)
        with patch('src.commands.merge.merge_profiles', return_value=1):
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2"],
                capture_output=True,
                text=True
            )
            assert result.returncode == 1
        
        # Test exit code 5 (user abort)
        with patch('src.commands.merge.merge_profiles', return_value=5):
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2"],
                capture_output=True,
                text=True
            )
            assert result.returncode == 5
        
        # Test exit code 0 (success)
        with patch('src.commands.merge.merge_profiles', return_value=0):
            result = subprocess.run(
                [sys.executable, "main.py", "merge", "-m", "1", "-i", "2"],
                capture_output=True,
                text=True
            )
            assert result.returncode == 0


class TestPerformance:
    """Test performance requirements."""
    
    @pytest.mark.slow
    def test_batch_merge_performance(self):
        """Test that merging 50 users completes in under 5 seconds."""
        import time
        from unittest.mock import patch, MagicMock
        
        with patch('src.commands.merge.db_manager') as mock_db:
            mock_session = MagicMock()
            mock_db.get_session.return_value = mock_session
            mock_session.begin.return_value.__enter__.return_value = mock_session
            
            # Mock 51 users (1 main + 50 merge)
            from core.models import User
            users = [User(id=i, first_name=f"User{i}", last_name="Test") for i in range(1, 52)]
            
            # Main user query returns first user, merge queries return others
            mock_session.query.return_value.filter_by.return_value.with_for_update.return_value.first.side_effect = users
            
            with patch('src.commands.merge.log_merge_event'):
                start_time = time.time()
                exit_code = merge_profiles(
                    main_id=1,
                    merge_ids=list(range(2, 52)),
                    no_interactive=True,
                    resolution_mode="prefer_main"
                )
                duration = time.time() - start_time
                
                assert exit_code == 0
                assert duration < 5.0, f"Batch merge took {duration:.2f}s, expected < 5s"